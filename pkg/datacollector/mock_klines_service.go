// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/klines_service.go

// Package datacollector is a generated GoMock package.
package datacollector

import (
	"context"

	"github.com/stretchr/testify/mock"
	"github.com/web3qt/dataFeeder/internal/types"
)

// MockKlinesService is a mock of KlinesService interface.
type MockKlinesService struct {
	mock.Mock
}

// NewMockKlinesService creates a new mock instance.
func NewMockKlinesService() *MockKlinesService {
	return &MockKlinesService{}
}

// Symbol mocks base method.
func (m *MockKlinesService) Symbol(symbol string) types.KlinesService {
	args := m.Called(symbol)
	if args.Get(0) != nil {
		return args.Get(0).(types.KlinesService)
	}
	return m
}

// Interval mocks base method.
func (m *MockKlinesService) Interval(interval string) types.KlinesService {
	args := m.Called(interval)
	if args.Get(0) != nil {
		return args.Get(0).(types.KlinesService)
	}
	return m
}

// Limit mocks base method.
func (m *MockKlinesService) Limit(limit int) types.KlinesService {
	args := m.Called(limit)
	if args.Get(0) != nil {
		return args.Get(0).(types.KlinesService)
	}
	return m
}

// StartTime mocks base method.
func (m *MockKlinesService) StartTime(startTime int64) types.KlinesService {
	args := m.Called(startTime)
	if args.Get(0) != nil {
		return args.Get(0).(types.KlinesService)
	}
	return m
}

// EndTime mocks base method.
func (m *MockKlinesService) EndTime(endTime int64) types.KlinesService {
	args := m.Called(endTime)
	if args.Get(0) != nil {
		return args.Get(0).(types.KlinesService)
	}
	return m
}

// Do mocks base method.
func (m *MockKlinesService) Do(ctx context.Context) ([]*types.KLineData, error) {
	args := m.Called(ctx)
	return args.Get(0).([]*types.KLineData), args.Error(1)
}
